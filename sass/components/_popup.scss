.popup {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba($color-black, .8);
  z-index: 9999; // we want it as high as possible, higher than hamburger menu

  opacity: 0; // initial state hidden
  visibility: hidden;
  transition: all 300ms;

  &__content {
    @include absCenter;
    width: 75%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba($color-black, .2);
    border-radius: $default-border-radius;

    overflow: hidden; // reveal rounded corners overflown by img
    display: table; // table on parent, table-cells on children (children gets applied equal height by browsers)

    opacity: 0; // initial state scaled down and invisible
    transform: translate(-50%, -50%) scale(.25); // re-declare `translate()` from our @mixin so not overwritten
    transition: all 500ms 200ms; // we add a short `transition-delay`

    @include respond(tab-port) {
      display: block;
    }

    @include respond(phone) {
      height: 80vh;
    }

    // 495px
    @media (max-width: 30.9375em) {
      width: 90vw;
      height: 90vh;
    }

  }

  // Equal height columns using CSS tables trick
  // https://css-tricks.com/fluid-width-equal-height-columns/#article-header-id-2
  // Give each table cell a percentage width that totals up to 100%
  &__left {
    width: 33.333333%;
    display: table-cell;

    @include respond(tab-port) {
      width: 100%; // put img stacked on top of text
      display: block;
      text-align: center;
    }

  }

  &__right {
    width: 66.666667%;
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem;

    @include respond(tab-port) {
      width: 100%; // put text stacked below img
      display: block;
    }

  }

  &__img {
    display: block;
    width: 100%;

    @include respond(tab-port) {
      display: inline-block; // put images along the same row
      width: 40%;
      vertical-align: middle; // vertically align both images if unequal height
    }

    @include respond(phone) {
      width: 35%; // scale down images
      margin: 3rem auto; // align images on same row as close button
    }

    // 360px
    @media (max-width: 22.5em) {
      width: 22%;
      margin: 3rem auto 0; // remove bottom margin
    }

  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    -webkit-column-count: 2;
       -moz-column-count: 2;
            column-count: 2;
    -webkit-column-gap: 4rem;
       -moz-column-gap: 4rem;
            column-gap: 4rem;
    -webkit-column-rule: 1px solid $color-grey-light-2;
       -moz-column-rule: 1px solid $color-grey-light-2;
            column-rule: 1px solid $color-grey-light-2; // column separator style

    // Only supported on Android & Mac platforms (and only the "auto" value) for now. See https://caniuse.com/#feat=css-hyphens
    // auto hyphenate words when text wraps; specify @lang attribute in html
    -webkit-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;

    
    @include respond(phone) {
      font-size: 1.6rem;

      -webkit-column-count: auto; // remove column properties, reset all to initial values
         -moz-column-count: auto;
              column-count: auto;
      -webkit-column-gap: normal;
         -moz-column-gap: normal;
              column-gap: normal;
      -webkit-column-rule: medium none currentColor;
         -moz-column-rule: medium none currentColor;
              column-rule: medium none currentColor;
    }

  }


  // FUNCTIONALITY
  // Open states
  &:target {
    opacity: 1;
    visibility: visible;
  }

  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1); // again we re-declare `translate()` from our @mixin so not overwritten
  }

  &__close {

    &:link,
    &:visited {
      color: $color-grey-dark;
      position: absolute;
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      line-height: 1; // remove pre-defined line-height (extra height on text) so our positioning gets applied as intended
      text-decoration: none;
      display: inline-block;
      transition: all 200ms;
    }

    &:hover,
    &:active {
      color: $color-primary;
    }

  }

}
